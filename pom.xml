<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>ch.bfh.ti.soed</groupId>
	<artifactId>academia-ng-due1</artifactId>
	<name>academia-ng-due1</name>
	<version>1.0-SNAPSHOT</version>
	<packaging>war</packaging>
	<url>http://www.ti.bfh.ch</url>

	<properties>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<failOnMissingWebXml>false</failOnMissingWebXml>

		<!-- Dependencies -->
		<vaadin.version>11.0.0</vaadin.version>
		<tomee.version>7.0.5</tomee.version>
		<derby.version>10.13.1.1</derby.version>
		<checkstyle.version>8.12</checkstyle.version>
		<pmd.version>6.7.0</pmd.version>
	</properties>

	<repositories>
		<repository>
			<id>Vaadin prereleases</id>
			<url>https://maven.vaadin.com/vaadin-prereleases</url>
		</repository>
		<repository>
			<id>Vaadin Directory</id>
			<url>http://maven.vaadin.com/vaadin-addons</url>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>vaadin-prereleases</id>
			<url>https://maven.vaadin.com/vaadin-prereleases</url>
		</pluginRepository>
	</pluginRepositories>

	<distributionManagement>
		<site>
			<id>academia.local</id>
			<name>Academia</name>
			<!-- Normally, you would use a full-fledged HTTP(S) URL here... -->
			<url>target/staging</url>
		</site>
	</distributionManagement>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>com.vaadin</groupId>
				<artifactId>vaadin-bom</artifactId>
				<type>pom</type>
				<scope>import</scope>
				<version>${vaadin.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>com.vaadin</groupId>
			<artifactId>vaadin-core</artifactId>
		</dependency>
		<dependency>
			<groupId>com.vaadin</groupId>
			<artifactId>vaadin-cdi</artifactId>
			<version>10.0.0.beta1</version>
		</dependency>
		<dependency>
			<groupId>javax</groupId>
			<artifactId>javaee-api</artifactId>
			<version>8.0</version>
			<scope>provided</scope>
		</dependency>
		<!-- Added to provide logging output as Flow uses the unbound SLF4J no-operation 
			(NOP) logger implementation -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.tomee</groupId>
			<artifactId>openejb-core</artifactId>
			<version>7.1.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.eclipse.persistence</groupId>
			<artifactId>eclipselink</artifactId>
			<version>2.6.5</version>
			<!-- Note: Do not use 2.7.x as that version is not compatible with org.apache.tomee:openejb-core 
				7.1.0 -->
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<version>5.3.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>5.3.1</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<pluginManagement>
			<plugins>
				<!-- The following plugin management needed here to ensure that Checkstyle 
					version ${checkstyle.version} is used. -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-checkstyle-plugin</artifactId>
					<version>3.0.0</version>
					<dependencies>
						<dependency>
							<groupId>com.puppycrawl.tools</groupId>
							<artifactId>checkstyle</artifactId>
							<version>8.12</version>
						</dependency>
					</dependencies>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<!-- See: http://www.mojohaus.org/properties-maven-plugin/usage.html -->
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>properties-maven-plugin</artifactId>
				<version>1.0.0</version>
				<executions>
					<!-- See: http://bit.ly/2qVTIEO if Eclipse indicates an error -->
					<execution>
						<goals>
							<goal>set-system-properties</goal>
						</goals>
						<configuration>
							<properties>
								<property>
									<!-- Motivation: JDepend consults its configuration file jdepend.properties 
										in the user's home directory only (or, in addition, on the class path, but 
										this is useless for our context). So let's cheat here and set the user's 
										home directory equal to the current directory, allowing JDepend to find and 
										consult the project-specific configuration file. -->
									<name>user.home</name>
									<value>${user.dir}</value>
									<!-- <value>${project.build.directory}/..</value> -->
								</property>
							</properties>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.tomee.maven</groupId>
				<artifactId>tomee-maven-plugin</artifactId>
				<version>7.0.5</version>
				<configuration>
					<context>ROOT</context>
					<!-- <context>${project.name}</context> -->
					<tomeeClassifier>webprofile</tomeeClassifier>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.22.0</version>
			</plugin>
			<plugin>
				<!-- See: http://www.eclemma.org/jacoco/trunk/doc/examples/build/pom.xml -->
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.8.2</version>
				<executions>
					<execution>
						<id>default-prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>default-report</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
					<execution>
						<id>default-check</id>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<rules>
								<!-- implementation is needed only for Maven 2 -->
								<rule implementation="org.jacoco.maven.RuleConfiguration">
									<element>BUNDLE</element>
									<limits>
										<!-- implementation is needed only for Maven 2 -->
										<limit implementation="org.jacoco.report.check.Limit">
											<counter>COMPLEXITY</counter>
											<value>COVEREDRATIO</value>
											<!-- TODO: Raise coverage rate to 80 at least -->
											<minimum>0.8</minimum>
										</limit>
									</limits>
								</rule>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>3.0.1</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<configuration>
					<configLocation>src/checkstyle/checkstyle-configuration.xml</configLocation>
					<headerLocation>src/checkstyle/checkstyle-header.txt</headerLocation>
					<failsOnError>false</failsOnError>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>2.9</version>
				<configuration>
					<dependencyDetailsEnabled>false</dependencyDetailsEnabled>
					<dependencyLocationsEnabled>false</dependencyLocationsEnabled>
				</configuration>
				<reportSets>
					<reportSet>
						<reports>
							<report>dependencies</report>
							<report>project-team</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>3.0.1</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-report-plugin</artifactId>
				<version>2.22.0</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>report-only</report>
							<report>failsafe-report-only</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jxr-plugin</artifactId>
				<version>2.5</version>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>jdepend-maven-plugin</artifactId>
				<version>2.0</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>3.0.0</version>
				<configuration>
					<configLocation>src/checkstyle/checkstyle-configuration.xml</configLocation>
					<headerLocation>src/checkstyle/checkstyle-header.txt</headerLocation>
					<suppressionsLocation>src/checkstyle/checkstyle-suppressions.xml</suppressionsLocation>
					<failsOnError>false</failsOnError>
				</configuration>
				<reportSets>
					<reportSet>
						<reports>
							<report>checkstyle</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>3.10.0</version>
				<configuration>
					<linkXref>true</linkXref>
					<sourceEncoding>${project.build.sourceEncoding}</sourceEncoding>
					<skipEmptyReport>false</skipEmptyReport>
					<targetJdk>${maven.compiler.source}</targetJdk>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<reportSets>
					<reportSet>
						<reports>
							<!-- select non-aggregated reports -->
							<report>report</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
		</plugins>
	</reporting>

	<profiles>
		<!-- The TomEE plugin allows us to easily run the built artifact by running 
			tomee:run -P<Profile ID> on the command line. -->
		<!-- Derby server database. Ensure that the DB server is up and running. -->
		<profile>
			<id>derby-client-server</id>
			<dependencies>
				<dependency>
					<groupId>org.apache.derby</groupId>
					<artifactId>derby</artifactId>
					<version>${derby.version}</version>
				</dependency>
				<dependency>
					<groupId>org.apache.derby</groupId>
					<artifactId>derbyclient</artifactId>
					<version>${derby.version}</version>
					<type>jar</type>
				</dependency>
			</dependencies>
			<build>
				<resources>
					<resource>
						<directory>src/main/config/derby-client-server</directory>
						<includes>
							<include>*</include>
						</includes>
						<targetPath>META-INF</targetPath>
					</resource>
				</resources>
				<plugins>
					<plugin>
						<groupId>org.apache.tomee.maven</groupId>
						<artifactId>tomee-maven-plugin</artifactId>
						<version>7.0.5</version>
						<configuration>
							<context>ROOT</context>
							<config>src/main/config/tomee-derby-client-server</config>
							<path>target/${project.artifactId}.${project.version}.${project.packaging}</path>
							<!-- If artifact is not of type 'war' then configure TomEE to use 
								Eclipselink -->
							<!-- See: http://tomee.apache.org/tomee-maven-plugin.html -->
							<libs>
								<!-- group-id:artefact-id:version -->
								<lib>org.apache.derby:derby:${derby.version}</lib>
								<lib>org.apache.derby:derbyclient:${derby.version}</lib>
							</libs>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!-- Vaadin-provided profile for the generation of production code. -->
		<profile>
			<id>productionMode</id>
			<activation>
				<property>
					<name>vaadin.productionMode</name>
				</property>
			</activation>
			<dependencies>
				<dependency>
					<groupId>com.vaadin</groupId>
					<artifactId>flow-server-production-mode</artifactId>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>com.vaadin</groupId>
						<artifactId>vaadin-maven-plugin</artifactId>
						<version>${vaadin.version}</version>
						<executions>
							<execution>
								<goals>
									<goal>copy-production-files</goal>
									<goal>package-for-production</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
